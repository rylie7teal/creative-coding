(()=>{var __webpack_modules__={839:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n;// CONCATENATED MODULE: ./js/lib/dom-component.js\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nclass DomComponent {\n  constructor($domElement) {\n    _defineProperty(this, \"$domElement\", void 0);\n    if (!$domElement) {\n      return;\n    }\n    this.$domElement = $domElement;\n    this.$domElement.classList.add('js');\n    [this.baseCSSClass] = this.$domElement.classList;\n  }\n  loaded() {\n    this.$domElement.classList.add('js-loaded');\n  }\n  find(selector, keepAsArray = false) {\n    const found = this.findAll(selector);\n    if (!found) {\n      return false;\n    }\n    if (keepAsArray === false) {\n      return found.length > 1 ? found : found[0];\n    }\n    return found;\n  }\n  findAll(selector) {\n    const found = this.$domElement.querySelectorAll(selector);\n    if (found && found.length) {\n      return Array.from(found);\n    }\n    return found;\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/each.js\nfunction each(nodeList, cb) {\n  if (!nodeList || !nodeList.length) {\n    return;\n  }\n  for (let i = 0; i < nodeList.length; i++) {\n    cb(nodeList[i], i);\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/const.js\nconst mqMap = {\n  xs: 480,\n  sm: 768,\n  md: 1094,\n  lg: 1280,\n  xl: 1690,\n  navDesktop: 1690\n};\nconst duration = 400;\nconst durationLong = 700;\nconst $ = window.jQuery;\n;// CONCATENATED MODULE: ./blocks/image-gallery/image-gallery.block.js\nfunction image_gallery_block_defineProperty(e, r, t) { return (r = image_gallery_block_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction image_gallery_block_toPropertyKey(t) { var i = image_gallery_block_toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction image_gallery_block_toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\nlet activeLightboxLink = null;\nclass ImageGallery extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    image_gallery_block_defineProperty(this, \"_index\", null);\n    image_gallery_block_defineProperty(this, \"_visibleThumbnails\", 4);\n    image_gallery_block_defineProperty(this, \"_gridGap\", 16);\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    }, 100);\n  }\n  get index() {\n    return this._index;\n  }\n  set index(newIndex) {\n    if (newIndex >= this.$slides.length) {\n      newIndex = 0;\n    }\n    if (newIndex < 0) {\n      newIndex = this.$slides.length - 1;\n    }\n    const transformValueX = newIndex * -100;\n\n    // we add one to the new index so we don't show the currently displayed image in the list of thumbnails. But rather the next imagae in the sequence\n\n    this.$slideshowTrack.style.transform = `translateX(${transformValueX}%)`;\n    if (this.$slides.length > this._visibleThumbnails) {\n      if (newIndex + 1 + this._visibleThumbnails <= this.$slides.length) {\n        const transformValueY = (newIndex + 1) * -(this.$thumbnail[0].offsetHeight + this._gridGap);\n        this.$thumbnailTrack.style.transform = `translateY(${transformValueY}px)`;\n      } else {\n        const maxTransform = (this.$slides.length - this._visibleThumbnails) * -(this.$thumbnail[0].offsetHeight + this._gridGap);\n        this.$thumbnailTrack.style.transform = `translateY(${maxTransform}px)`;\n      }\n    }\n    if (this.index != null) {\n      this.$pages[this.index].classList.remove('active');\n    }\n    this.$pages[newIndex].classList.add('active');\n    this.showDescription(newIndex);\n    this._index = newIndex;\n  }\n  init() {\n    this.resize = null;\n    this.$slides = this.find('[js-slide]');\n    this.$thumbnailsContainer = this.find('[js-thumbnails-container]');\n    this.$thumbnailTrack = this.find('[js-thumbnail-track]');\n    this.$slideshowTrack = this.find('[js-slideshow-track]');\n    this.$thumbnail = this.find('[js-thumbnail]');\n    this.$nextSlide = this.find('[js-next]');\n    this.$previousSlide = this.find('[js-prev]');\n    this.$descriptions = this.find('[js-description]');\n    this.$descriptonContainer = this.find('[js-description-container]');\n    this.$pages = this.find('[js-page]');\n    this.translateY = 0;\n    this.setupListeners();\n    this.initializeGallery();\n  }\n  setupListeners() {\n    this.$nextSlide.addEventListener('click', () => {\n      this.index++;\n    });\n    this.$previousSlide.addEventListener('click', () => {\n      this.index--;\n    });\n    each(this.$slides, slide => {\n      if (slide.querySelector('a')) {\n        let link = slide.querySelector('a');\n        link.addEventListener('click', this.openLightbox.bind(this));\n      }\n    });\n    window.addEventListener('keydown', this.escLightbox.bind(this));\n    each(this.$thumbnail, thumbnail => {\n      thumbnail.addEventListener('click', this.thumbnailClick.bind(this));\n    });\n    window.addEventListener('resize', () => {\n      this.$thumbnailsContainer.height = 'auto';\n      this.$domElement.classList.remove('ready');\n      clearTimeout(this.resize);\n      this.resize = setTimeout(() => {\n        this.initializeGallery();\n      }, 50);\n    });\n  }\n  initializeGallery() {\n    let count = this.$thumbnailTrack.children.length;\n    while (count < 4) {\n      const placeholder = document.createElement('div');\n      placeholder.className = 'image-gallery__slideshow__thumbnail';\n      this.$thumbnailTrack.append(placeholder);\n      count++;\n    }\n    this.$thumbnailsContainer.style.height = `${this.$slideshowTrack.offsetHeight}px`;\n    this.$domElement.classList.add('ready');\n    this.createLightbox();\n    if (this.index === null) {\n      this.index = 0;\n    }\n  }\n  thumbnailClick(e) {\n    this.index = this.getIndex(e.currentTarget);\n  }\n  getIndex(elem) {\n    let i = 0;\n    while ((elem = elem.previousElementSibling) != null) ++i;\n    return i;\n  }\n  showDescription(newIndex) {\n    if (this.$descriptions[this.index] != null) {\n      this.$descriptions[this.index].classList.remove('active');\n    }\n    const height = this.$descriptions[newIndex].offsetHeight;\n    this.$descriptonContainer.style.height = `${height}px`;\n    this.$descriptions[newIndex].classList.add('active');\n  }\n\n  /**\r\n   * All code below implements various lightbox features\r\n   */\n\n  createLightbox() {\n    if (document.querySelectorAll('.lightbox-container').length >= 1) {\n      return false;\n    }\n    const lbcontainer = document.createElement('div');\n    lbcontainer.classList.add('lightbox-container');\n    lbcontainer.setAttribute('role', 'dialog');\n    lbcontainer.setAttribute('aria-labelledby', 'lightbox-title');\n    lbcontainer.setAttribute('aria-describedby', 'lightbox-content');\n    lbcontainer.setAttribute('aria-hidden', 'true');\n    const lb = document.createElement('div');\n    lb.classList.add('lightbox');\n    const lbFig = document.createElement('figure');\n    lbFig.classList.add('lightbox-figure');\n    const lbCaption = document.createElement('figcaption');\n    lbCaption.classList.add('lightbox-description');\n    const lbTitle = document.createElement('h3');\n    lbTitle.id = 'lightbox-title';\n    const lbContent = document.createElement('div');\n    lbContent.id = 'lightbox-content';\n    const lbImage = document.createElement('div');\n    lbImage.classList.add('lightbox-image');\n    const lbClose = document.createElement('button');\n    lbClose.classList.add('close-lightbox');\n    lbClose.setAttribute('aria-label', 'Close Lightbox');\n    lbClose.addEventListener('click', this.closeLightbox.bind(this));\n    const lbCloseText = document.createElement('i');\n    lbCloseText.classList.add('iconoir-cancel');\n    const lbCloseSRText = document.createElement('span');\n    lbCloseSRText.classList.add('screen-reader-text');\n    lbCloseSRText.innerText = 'Close this lightbox';\n    lbClose.appendChild(lbCloseText);\n    lbClose.appendChild(lbCloseSRText);\n    lbCaption.appendChild(lbTitle);\n    lbCaption.appendChild(lbContent);\n    lbFig.appendChild(lbImage);\n    lbFig.appendChild(lbCaption);\n    lb.appendChild(lbFig);\n    lb.appendChild(lbClose);\n    lbcontainer.appendChild(lb);\n    document.body.appendChild(lbcontainer);\n  }\n  advanceLightbox() {\n    this.index++;\n    this.shiftLightbox();\n  }\n  previousLightbox() {\n    this.index--;\n    this.shiftLightbox();\n  }\n  shiftLightbox() {\n    const thumb = this.$thumbnail[this.index];\n    const thumbImg = thumb.querySelector('img');\n    let thumbSrc = thumbImg.src;\n    thumbSrc = thumbSrc.replace('http:', '');\n    thumbSrc = thumbSrc.replace('https:', '');\n    const activeSlide = this.$slides[this.index];\n    const link = activeSlide.querySelector('a');\n    this.openLightbox(link);\n  }\n  createLightboxNav(thumbs) {\n    if (document.querySelectorAll('[js-lightbox-prev]') >= 1) {\n      return;\n    }\n    const lb = document.querySelector('.lightbox-container .lightbox');\n    const lbNav = document.createElement('div');\n    lbNav.classList.add('lightbox-nav');\n    const lbPrev = document.querySelector('button[js-prev]').cloneNode(true);\n    const lbNext = document.querySelector('button[js-next]').cloneNode(true);\n    lbPrev.removeAttribute('js-prev');\n    lbPrev.setAttribute('js-lightbox-prev', '');\n    lbPrev.addEventListener('click', this.previousLightbox.bind(this));\n    lbNext.removeAttribute('js-next');\n    lbNext.setAttribute('js-lightbox-next', '');\n    lbNext.addEventListener('click', this.advanceLightbox.bind(this));\n    lbNav.appendChild(lbPrev);\n    lbNav.appendChild(lbNext);\n    lb.appendChild(lbNav);\n  }\n  openLightbox(e) {\n    let el = e;\n    if (e.preventDefault) {\n      e.preventDefault();\n      el = e.target;\n    }\n    if (document.querySelectorAll('.lightbox-container').length <= 0) {\n      this.createLightbox();\n    }\n    let clickedLink = null;\n    if ('a' === el.tagName) {\n      clickedLink = el;\n    } else {\n      clickedLink = el.closest('a');\n    }\n    activeLightboxLink = clickedLink;\n    const lightbox = document.querySelector('.lightbox-container');\n    const lbTitle = lightbox.querySelector('#lightbox-title');\n    const lbContent = lightbox.querySelector('#lightbox-content');\n    const lbImage = lightbox.querySelector('.lightbox-image');\n    const lbClose = lightbox.querySelector('.close-lightbox');\n    const gallery = el.closest('.image-gallery__slideshow');\n    const thumbs = gallery.querySelectorAll('.image-gallery__slideshow__thumbnails__track button.image-gallery__slideshow__thumbnail');\n    if (thumbs.length >= 1) {\n      this.createLightboxNav(thumbs);\n    }\n    const description = this.$descriptions[this.index];\n    const title = description.querySelector('.image-gallery__description__header');\n    const caption = description.querySelector('.image-gallery__description__summary');\n    const image = clickedLink.querySelector('img');\n    if (typeof title !== 'undefined' || typeof caption !== 'undefined') {\n      if (typeof title !== 'undefined') {\n        lbTitle.innerHTML = title.innerHTML;\n      } else {\n        lbTitle.innerHTML = '';\n      }\n      if (typeof caption !== 'undefined') {\n        lbContent.innerHTML = caption.innerHTML;\n      } else {\n        lbContent.innerHTML = '';\n      }\n      lightbox.querySelector('.lightbox-description').classList.add('active');\n    }\n    let imgSrc = '';\n    if (clickedLink.href.indexOf('uploads') >= 0) {\n      imgSrc = clickedLink.href;\n    } else {\n      imgSrc = image.getAttribute('src');\n    }\n    lbImage.style.backgroundImage = 'url(' + imgSrc + ')';\n    lightbox.setAttribute('aria-hidden', 'false');\n    lightbox.classList.add('open');\n    lbClose.focus();\n    this.trapFocus(lightbox);\n    return false;\n  }\n  escLightbox(e) {\n    if (document.querySelectorAll('.lightbox-container.open').length <= 0) {\n      return;\n    }\n    switch (e.key) {\n      case 'Esc':\n      case 'Escape':\n        document.querySelector('.close-lightbox').click();\n        break;\n      default:\n        return;\n    }\n  }\n  closeLightbox(e) {\n    const lightbox = e.target.closest('.lightbox-container');\n    lightbox.setAttribute('aria-hidden', 'true');\n    lightbox.classList.remove('open');\n    activeLightboxLink.focus();\n    return false;\n  }\n  trapFocus(element) {\n    var focusableEls = element.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])');\n    var firstFocusableEl = focusableEls[0];\n    var lastFocusableEl = focusableEls[focusableEls.length - 1];\n    var KEYCODE_TAB = 9;\n    element.addEventListener('keydown', function (e) {\n      var isTabPressed = e.key === 'Tab' || e.keyCode === KEYCODE_TAB;\n      if (!isTabPressed) {\n        return;\n      }\n      if (e.shiftKey) /* shift + tab */{\n          if (document.activeElement === firstFocusableEl) {\n            lastFocusableEl.focus();\n            e.preventDefault();\n          }\n        } else /* tab */{\n          if (document.activeElement === lastFocusableEl) {\n            firstFocusableEl.focus();\n            e.preventDefault();\n          }\n        }\n    });\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/delay.js\nfunction delay(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(), duration);\n  });\n}\n;// CONCATENATED MODULE: ./blocks/pull-quotes/pull-quotes.block.js\nfunction pull_quotes_block_defineProperty(e, r, t) { return (r = pull_quotes_block_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction pull_quotes_block_toPropertyKey(t) { var i = pull_quotes_block_toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction pull_quotes_block_toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\nclass Carousel extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    pull_quotes_block_defineProperty(this, \"_index\", 0);\n    pull_quotes_block_defineProperty(this, \"_activeSlide\", null);\n    this.isAnimating = false;\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    });\n  }\n  get index() {\n    return this._index;\n  }\n  set index(newIndex) {\n    if (newIndex === this.$slides.length) {\n      newIndex = 0;\n    }\n    this.$activeSlide = this.$slides[newIndex];\n    this._index = newIndex;\n  }\n  get $activeSlide() {\n    return this._activeSlide;\n  }\n  set $activeSlide(newSlide) {\n    if (this.$activeSlide) {\n      this.animateSlide(newSlide, () => {\n        this.isAnimating = false;\n        this._activeSlide = newSlide;\n      });\n      // this.$activeSlide.classList.remove('active');\n    } else {\n      newSlide.classList.add('active');\n      this._activeSlide = newSlide;\n    }\n  }\n  init() {\n    this.$slides = this.findAll('[js-slide]');\n    if (!this.$slides.length) {\n      return;\n    }\n    this.$carousel = this.find('[js-carousel]');\n    this.$nextButton = this.findAll('[js-next-button]');\n    this.attachEvents();\n    this.initCarousel();\n  }\n  attachEvents() {\n    each(this.$nextButton, button => {\n      button.addEventListener('click', this.goToNextStory.bind(this));\n    });\n    window.addEventListener('resize', this.reset.bind(this));\n  }\n  goToNextStory() {\n    if (this.isAnimating) return;\n    this.isAnimating = true;\n    this.index++;\n  }\n  initCarousel() {\n    if (!this.$activeSlide) {\n      this.$activeSlide = this.$slides[0];\n    }\n    this.$carousel.style.height = `${this.$activeSlide.children[0].offsetHeight}px`;\n    this.$activeSlide.classList.remove('preload');\n  }\n  animateSlide(newSlide, cb) {\n    Promise.resolve().then(() => this.$activeSlide.classList.add('transition-out'))\n    // .then(() => this._activeSlide = newSlide)\n    .then(() => delay(durationLong)).then(() => {\n      this.$activeSlide.classList.remove('active');\n      newSlide.classList.add('active');\n      this.$carousel.style.height = `${newSlide.children[0].offsetHeight}px`;\n    }).then(() => delay(durationLong)).then(() => newSlide.classList.remove('transition-out')).then(() => delay(durationLong)).then(() => cb());\n  }\n  reset() {\n    setTimeout(() => {\n      this.initCarousel();\n    }, durationLong);\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/mq.js\n\nfunction mq(breakpoint, direction = 'min-width') {\n  if (mqMap.hasOwnProperty(breakpoint)) {\n    breakpoint = mqMap[breakpoint] + 'px';\n  }\n  if (mqMap.hasOwnProperty(direction)) {\n    breakpoint = [breakpoint];\n    breakpoint.push(mqMap[direction] + 'px');\n  }\n  let query;\n  if (typeof breakpoint === 'string') {\n    query = `(${direction}: ${breakpoint})`;\n  } else {\n    query = `(min-width: ${breakpoint[0]}) and (max-width: ${breakpoint[1]})`;\n  }\n  return window.matchMedia(query).matches;\n}\n;// CONCATENATED MODULE: ./js/components/sidebar-accordion.js\n\nclass SidebarAccordion {\n  constructor(trigger, useMaxHeight = false) {\n    this.trigger = trigger;\n    this.propertyToUse = useMaxHeight ? 'maxHeight' : 'height';\n    this.expandableSection = this.trigger.nextElementSibling;\n    this.height = this.expandableSection.offsetHeight;\n    this.expanded = false;\n    if (!mq('md')) {\n      if (!this.trigger.classList.contains('default')) {\n        this.expandableSection.style[this.propertyToUse] = 0;\n      } else {\n        this.trigger.classList.add('open');\n        this.expanded = true;\n        this.expandableSection.style[this.propertyToUse] = `${this.height}px`;\n      }\n    }\n    this.trigger.addEventListener('click', this.triggerClick.bind(this));\n    window.addEventListener('resize', this.resize.bind(this));\n  }\n  triggerClick() {\n    if (mq('md')) {\n      return;\n    }\n    if (this.expanded) {\n      this.expandableSection.style[this.propertyToUse] = 0;\n      this.expandableSection.style.pointerEvents = 'none';\n      this.trigger.classList.remove('open');\n    } else {\n      this.expandableSection.style[this.propertyToUse] = `${this.height}px`;\n      this.expandableSection.style.pointerEvents = 'all';\n      this.trigger.classList.add('open');\n    }\n    this.expanded = !this.expanded;\n  }\n  resize() {\n    if (!mq('md')) {\n      this.expanded = false;\n      this.expandableSection.style[this.propertyToUse] = 0;\n      this.trigger.classList.remove('open');\n    } else {\n      this.expandableSection.style[this.propertyToUse] = `auto`;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./sidebar/sidebar.js\n\n\nclass Sidebar extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    });\n  }\n  init() {\n    this.$accordionTrigger = this.find('[js-accordion-trigger]');\n    this.accordion = new SidebarAccordion(this.$accordionTrigger);\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/on-load.js\nfunction onLoad(cb, onDOMContentLoad = true) {\n  if (onDOMContentLoad === true) {\n    if (document.readyState === 'complete' || document.readyState === 'loaded') {\n      cb();\n    } else {\n      window.addEventListener('DOMContentLoaded', cb);\n    }\n  } else {\n    if (document.readyState === 'complete') {\n      cb();\n    } else {\n      window.addEventListener('load', cb);\n    }\n  }\n}\n;// CONCATENATED MODULE: ./js/lib/register-module.js\n\n\nconst registerModule = (selector, ComponentClass, onDOMContentLoad = false) => {\n  onLoad(() => {\n    const domNodes = document.querySelectorAll(`[data-module=\"${selector}\"]`);\n    if (domNodes.length === 0) {\n      return;\n    }\n    each(domNodes, domElement => new ComponentClass(domElement));\n  }, onDOMContentLoad);\n};\n/* harmony default export */ const register_module = (registerModule);\n;// CONCATENATED MODULE: ./blocks/featured-content/featured-news.js\nconst setOffsets = els => {\n  els.forEach(el => {\n    let offset = [];\n    if (el.querySelectorAll('.umw-featured-news-card__main__content').length > 0) {\n      console.log('Looking at the old style news cards for offset info');\n      const text = el.querySelector('.umw-featured-news-card__main__content');\n      const image = el.querySelector('.umw-featured-news-card__main__image');\n      offset = [text.getBoundingClientRect().height, image.getBoundingClientRect().height / 2, parseInt(window.getComputedStyle(image).getPropertyValue('margin-bottom'))];\n    } else if (el.querySelectorAll('news-card').length > 0) {\n      console.log('Looking at News Card components for offset info');\n      const text = el.querySelector('news-card').shadowRoot.querySelector('.umw-news-card__content');\n      const image = el.querySelector('news-card').shadowRoot.querySelector('.umw-news-card__article-image');\n      offset = [text.getBoundingClientRect().height, image.getBoundingClientRect().height / 2, parseInt(window.getComputedStyle(text).getPropertyValue('padding-top'))];\n    }\n    console.log('Offset info looks like: ');\n    console.log(offset);\n    offset = offset.reduce((prev, cur) => prev + cur, 0);\n    console.log('Preparing to set offset to ' + offset);\n    el.style.setProperty('--bg-offset', `${offset}px`);\n  });\n};\nconst mobileMQ = window.matchMedia('(max-width: 1093px)');\nlet timeout = 0;\n/* harmony default export */ const featured_news = (() => {\n  let featuredNewsCards = Array.from(document.querySelectorAll('.umw-featured-news-card'));\n\n  // Only need cards that have a Heading and See More inside.\n  featuredNewsCards = featuredNewsCards.filter(item => item.querySelector('.umw-heading-and-see-more'));\n  const setAllOffsets = setOffsets.bind(null, featuredNewsCards);\n  setAllOffsets();\n  window.addEventListener('load', setAllOffsets);\n  window.addEventListener('resize', () => {\n    window.clearTimeout(timeout);\n    if (mobileMQ.matches) {\n      window.setTimeout(setAllOffsets, 200);\n    }\n  });\n});\n;// CONCATENATED MODULE: ./js/components/expandable.js\nfunction expandable_defineProperty(e, r, t) { return (r = expandable_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction expandable_toPropertyKey(t) { var i = expandable_toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction expandable_toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nclass Expandable {\n  constructor(el, amount = 20) {\n    expandable_defineProperty(this, \"_width\", void 0);\n    this.el = el;\n    this.amount = amount;\n    window.addEventListener('resize', this.initializeWidth.bind(this));\n    this.initializeWidth();\n    this.el.addEventListener('mouseover', this.mouseover.bind(this));\n    this.el.addEventListener('mouseout', this.mouseout.bind(this));\n    window.addEventListener('resize', () => {\n      this.el.style.width = `auto`;\n      setTimeout(() => {\n        this.initializeWidth();\n        this.el.style.width = `${this.width}px`;\n      }, 10);\n    });\n  }\n  get width() {\n    return this._width;\n  }\n  set width(newWidth) {\n    this.el.style.width = `${newWidth}px`;\n    this._width = newWidth;\n  }\n  mouseover() {\n    this.el.style.width = `${this.width + 20}px`;\n    this.el.classList.add('hover');\n  }\n  mouseout() {\n    this.el.style.width = `${this.width}px`;\n    this.el.classList.remove('hover');\n  }\n  initializeWidth() {\n    const rect = this.el.getBoundingClientRect();\n    this.width = Math.ceil(rect.width);\n  }\n  static init() {\n    setTimeout(() => {\n      const items = document.querySelectorAll('[js-expandable], .umw-with-blocks .button:not(.gform_button)');\n      Array.from(items).map(el => new Expandable(el));\n    }, 250);\n  }\n}\n;// CONCATENATED MODULE: ./blocks/hero-intro/hero-intro.block.js\n\n\n\n\nclass HeroIntro extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    });\n  }\n  init() {\n    this.$links = this.findAll('[js-link]');\n    Array.from(this.$links).map(link => new Expandable(link));\n  }\n}\nregister_module('hero-intro', HeroIntro);\n\n// Add controls to hero videos - CAG\nconst addHeroVideoControls = () => {\n  const videos = document.querySelectorAll('.umw-hero__media video');\n  if (videos.length <= 0) {\n    return;\n  }\n  videos.forEach(video => {\n    const parentContainer = video.closest('.umw-hero__media');\n    const play = document.createElement('button');\n    play.setAttribute('aria-label', 'Pause or Resume Hero Video');\n    play.classList.add('play');\n    play.setAttribute('data-icon', 'P');\n    const playButton = {\n      text: document.createTextNode('Play'),\n      span: document.createElement('span'),\n      icon: document.createElement('i')\n    };\n    const pauseButton = {\n      text: document.createTextNode('Pause'),\n      span: document.createElement('span'),\n      icon: document.createElement('i')\n    };\n    playButton.span.classList.add('sr-only');\n    pauseButton.span.classList.add('sr-only');\n    playButton.span.appendChild(playButton.text);\n    pauseButton.span.appendChild(pauseButton.text);\n    playButton.icon.classList.add('iconoir-play');\n    pauseButton.icon.classList.add('iconoir-pause');\n    play.appendChild(pauseButton.span);\n    play.appendChild(pauseButton.icon);\n    play.addEventListener('click', e => {\n      if (video.paused) {\n        play.setAttribute('data-icon', 'u');\n        play.removeChild(playButton.span);\n        play.removeChild(playButton.icon);\n        play.appendChild(pauseButton.span);\n        play.appendChild(pauseButton.icon);\n        video.play();\n      } else {\n        play.setAttribute('data-icon', 'P');\n        play.removeChild(pauseButton.span);\n        play.removeChild(pauseButton.icon);\n        play.appendChild(playButton.span);\n        play.appendChild(playButton.icon);\n        video.pause();\n      }\n    });\n    parentContainer.appendChild(play);\n  });\n};\nconst removeExtraHeader = () => {\n  if (document.querySelectorAll('h1.umw-hero__title__header').length <= 0) {\n    return;\n  }\n  if (document.querySelectorAll('h1').length <= 1) {\n    return;\n  }\n  const pageTitle = document.querySelector('h1.front-page-title');\n  pageTitle.remove();\n};\nonLoad(() => {\n  addHeroVideoControls();\n  removeExtraHeader();\n});\n;// CONCATENATED MODULE: ./blocks/featured-content/featured-content.block.js\n\n\n\nclass FeaturedContent extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    });\n  }\n  init() {\n    // this.$expanable = this.findAll('[js-expandable]');\n    // Array.from(this.$expanable).map(link => new Expandable(link));\n  }\n}\nregister_module('featured-content', FeaturedContent);\n;// CONCATENATED MODULE: ./blocks/video/video.block.js\n\n\nclass Video extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    });\n  }\n  init() {\n    this.$video = this.find('[js-video]');\n    this.$playButton = this.find('[js-play]');\n    this.bindEvents();\n  }\n  bindEvents() {\n    if (this.$playButton) {\n      this.$playButton.addEventListener('click', this.playVideo.bind(this));\n    }\n  }\n  playVideo() {\n    this.$domElement.classList.add('video-playing');\n    this.$video.play();\n    this.$video.setAttribute('controls', true);\n  }\n}\nregister_module('video', Video);\n;// CONCATENATED MODULE: ./blocks/accordion/accordion.block.js\n\n\nclass Accordion extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    this.questionCounter = 0;\n    this.setAccordionID();\n    this.possibleHash = window.location.hash.substring(1);\n    this.openItem = null;\n    setTimeout(() => {\n      this.init();\n      this.loaded();\n    }, 100);\n  }\n  setAccordionID() {\n    let nodes = document.querySelectorAll('.umw-accordion-container');\n    this.accordionID = Array.prototype.indexOf.call(nodes, this.$domElement) + 1;\n  }\n  getAccordionID() {\n    return this.accordionID;\n  }\n  getAnswerID(el) {\n    const nodes = this.$domElement.querySelectorAll('[data-js-question]');\n    let id = Array.prototype.indexOf.call(nodes, el.closest('[data-js-question]')) + 1;\n    return 'accordion-' + this.getAccordionID() + '-answer-' + id;\n  }\n  getTriggerID(el) {\n    const nodes = this.$domElement.querySelectorAll('[data-js-question]');\n    let id = Array.prototype.indexOf.call(nodes, el.closest('[data-js-question]')) + 1;\n    return 'accordion-' + this.getAccordionID() + '-question-' + id;\n  }\n  init() {\n    window.addEventListener('hashchange', this.hashChanged.bind(this));\n    this.$domElement.classList.add('accordion-js');\n    this.isOnlyOneOpenAtATime = this.$domElement.dataset.onlyOne == 'true';\n    this.$triggers = this.find('[data-js-trigger]', true);\n    this.$questions = this.find('[data-js-question]', true);\n    each(this.$questions, question => {\n      const trigger = question.querySelector('[data-js-trigger]');\n      const answer = question.querySelector('.accordion__question__answer');\n      if (this.possibleHash && answer.querySelectorAll('#' + this.possibleHash).length >= 1) {\n        this.openItem = trigger;\n      }\n      trigger.setAttribute('aria-expanded', 'false');\n      trigger.setAttribute('aria-controls', this.getAnswerID(trigger));\n      trigger.setAttribute('id', this.getTriggerID(trigger));\n      question.setAttribute('aria-labelledby', this.getTriggerID(trigger));\n      question.setAttribute('role', 'region');\n      answer.setAttribute('id', this.getAnswerID(answer));\n      answer.setAttribute('aria-hidden', 'true');\n      trigger.addEventListener('click', this.toggleOpen.bind(this));\n    });\n    if (this.openItem === null && this.possibleHash) {\n      if (this.$domElement.querySelectorAll('#' + this.possibleHash + '.accordion__question__trigger, #' + this.possibleHash + '.accordion__question__answer').length >= 1) {\n        let i = this.$domElement.querySelector('.accordion__question#' + this.possibleHash + ', .accordion__question > #' + this.possibleHash);\n        this.openItem = i.closest('.umw-collapsible-section.umw-custom-block').querySelector('[data-js-trigger]');\n      }\n    }\n    if (this.openItem) {\n      this.closeAll();\n      this.openItem.click();\n      this.openItem.scrollIntoView();\n    }\n  }\n  hashChanged(e) {\n    this.possibleHash = window.location.hash.substring(1);\n    this.openItem = null;\n    if (this.possibleHash) {\n      if (this.$domElement.querySelectorAll('.accordion__question #' + this.possibleHash).length >= 1) {\n        let i = this.$domElement.querySelector('#' + this.possibleHash);\n        this.openItem = i.closest('.umw-collapsible-section.umw-custom-block').querySelector('[data-js-trigger]');\n      }\n    }\n    if (this.openItem) {\n      this.closeAll();\n      this.openItem.click();\n      this.openItem.scrollIntoView();\n    }\n  }\n  toggleOpen(e) {\n    const containerClasses = e.currentTarget.parentElement.classList;\n    const previouslyOpen = containerClasses.contains('open') === true;\n    const button = e.currentTarget;\n    const accordion = button.closest('.umw-collapsible-section');\n    if (this.isOnlyOneOpenAtATime) {\n      this.closeAll();\n    }\n    if (previouslyOpen) {\n      containerClasses.remove('open');\n      button.setAttribute('aria-expanded', 'false');\n      button.closest('[data-js-question]').querySelector('.accordion__question__answer').setAttribute('aria-hidden', 'true');\n    } else {\n      containerClasses.add('open');\n      button.setAttribute('aria-expanded', 'true');\n      button.closest('[data-js-question]').querySelector('.accordion__question__answer').setAttribute('aria-hidden', 'false');\n    }\n  }\n  closeAll() {\n    each(this.$questions, $question => {\n      $question.querySelector('.accordion__question__answer').setAttribute('aria-hidden', 'true');\n      $question.querySelector('[data-js-trigger]').setAttribute('aria-expanded', 'false');\n      $question.classList.remove('open');\n    });\n  }\n}\n;// CONCATENATED MODULE: ./blocks/horizontal-scroller/horizontal-scroller.block.js\n\n\n\n\n\nclass HorizontalScroller extends DomComponent {\n  constructor($domElement) {\n    super($domElement);\n    this.hasScroll = false;\n    this.$wrapper = this.$domElement.querySelector('.umw-horizontal-scroller__wrapper');\n    this.$domElement.classList.add('scroll');\n    this.checkForScroll();\n    window.addEventListener('resize', this.checkForScroll.bind(this));\n  }\n  checkForScroll() {\n    if (this.isScrollable() && !this.hasScroll) {\n      this.createThumb();\n    } else if (!this.isScrollable() && this.hasScroll) {\n      this.removeScroller();\n    }\n  }\n  removeScroller() {\n    this.hasScroll = false;\n    if (this.$track) {\n      this.$track.remove();\n    }\n  }\n  isScrollable() {\n    const children = this.$domElement.querySelectorAll('.umw-horizontal-scroller__column');\n    let width = 0;\n    each(children, child => {\n      width += child.offsetWidth;\n    });\n    return document.documentElement.clientWidth < width;\n  }\n  createThumb() {\n    this.hasScroll = true;\n    const html = `\n\t\t\t<div class=\"scroll__track\" js-track>\n\t\t\t\t<div class=\"scroll__thumb\" js-thumb />\n\t\t\t</div>\n\t\t`;\n    this.$domElement.insertAdjacentHTML('afterend', html);\n    setTimeout(() => {\n      this.setUpBindings();\n    }, 50);\n  }\n  setUpBindings() {\n    this.$track = this.$domElement.nextElementSibling;\n    this.$thumb = this.$domElement.nextElementSibling.querySelector('[js-thumb]');\n    this.lengthOfScroll = this.$track.offsetWidth - this.$thumb.offsetWidth;\n    this.$wrapper.addEventListener('scroll', this.onScroll.bind(this));\n    this.initializeScrollBar();\n  }\n  initializeScrollBar() {\n    // const padding = 48 - 8; // this is the 24px padding on each side. We subtract 8 as this is the placeholder to give us a flush alignment\n    this.totalWidth = this.$wrapper.scrollWidth - document.documentElement.clientWidth;\n    this.scrollRatio = this.lengthOfScroll / this.totalWidth;\n  }\n  onScroll() {\n    // const amountScrolled = (this.$domElement.scrollLeft / this.totalWidth) * 100;\n    const amountScrolled = this.$wrapper.scrollLeft * this.scrollRatio;\n    this.$thumb.style.transform = `translateX(${amountScrolled}px)`;\n  }\n  static init() {\n    if (!mq('md')) {\n      onLoad(() => {\n        const scroll = document.querySelectorAll('[js-horizontal-scroll]');\n        Array.from(scroll).map(el => new HorizontalScroll(el));\n      });\n    }\n  }\n}\nregister_module('horizontal-scroller', HorizontalScroller);\n;// CONCATENATED MODULE: ./js/services/horizontal-scroll.js\n\n\n\nclass horizontal_scroll_HorizontalScroll {\n  constructor($el) {\n    this.$el = $el;\n    this.$inner = this.$el.firstElementChild;\n    this.$el.classList.add('scroll');\n    if (this.isScrollable()) {\n      this.createThumb();\n    }\n  }\n  isScrollable() {\n    const children = this.$inner.children;\n    let width = 0;\n    each(children, child => {\n      width += child.offsetWidth;\n    });\n    return document.documentElement.clientWidth < width;\n  }\n  createThumb() {\n    const html = `\n\t\t\t<div class=\"scroll__track\" js-track>\n\t\t\t\t<div class=\"scroll__thumb\" js-thumb />\n\t\t\t</div>\n\t\t`;\n    this.$el.insertAdjacentHTML('afterend', html);\n    setTimeout(() => {\n      this.setUpBindings();\n    }, 50);\n  }\n  setUpBindings() {\n    this.$track = this.$el.nextElementSibling;\n    this.$thumb = this.$el.nextElementSibling.querySelector('[js-thumb]');\n    this.lengthOfScroll = this.$track.offsetWidth - this.$thumb.offsetWidth;\n    this.$el.addEventListener('scroll', this.onScroll.bind(this));\n    this.initializeScrollBar();\n  }\n  initializeScrollBar() {\n    // const padding = 48 - 8; // this is the 24px padding on each side. We subtract 8 as this is the placeholder to give us a flush alignment\n    this.totalWidth = this.$el.scrollWidth - document.documentElement.clientWidth;\n    this.scrollRatio = this.lengthOfScroll / this.totalWidth;\n  }\n  onScroll() {\n    // const amountScrolled = (this.$el.scrollLeft / this.totalWidth) * 100;\n    const amountScrolled = this.$el.scrollLeft * this.scrollRatio;\n    this.$thumb.style.transform = `translateX(${amountScrolled}px)`;\n  }\n  static init() {\n    if (!mq('md')) {\n      onLoad(() => {\n        const scroll = document.querySelectorAll('[js-horizontal-scroll]');\n        Array.from(scroll).map(el => new horizontal_scroll_HorizontalScroll(el));\n      });\n    }\n  }\n}\n/* harmony default export */ const horizontal_scroll = (horizontal_scroll_HorizontalScroll);\n// EXTERNAL MODULE: ./js/components/select.js\nvar components_select = __webpack_require__(827);\n;// CONCATENATED MODULE: ./components/forms/forms.js\n\n\n\nclass GravityForm {\n  constructor($form) {\n    this.$form = $form;\n    this.$inputs = this.$form.querySelectorAll('input[type=\"text\"],input[type=\"email\"], input[type=\"tel\"], textarea, select');\n    this.bindEvents();\n    $('select', this.$form).niceSelect();\n  }\n  bindEvents() {\n    each(this.$inputs, input => {\n      input.addEventListener('blur', this.onBlur.bind(this));\n    });\n  }\n  onBlur(e) {\n    if (e.currentTarget.value.length > 0) {\n      e.currentTarget.classList.add('has-input');\n    } else {\n      e.currentTarget.classList.remove('has-input');\n    }\n  }\n  static init() {\n    Array.from(document.querySelectorAll('.gform_wrapper form')).map(form => new GravityForm(form));\n  }\n}\n;// CONCATENATED MODULE: ./index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * If there is a sidebar on the page, move the Intro Text and Button blocks out\r\n * of the Hero and into the main content.\r\n *\r\n * @param {HTMLElement} hero The Hero block.\r\n */\nconst manipulateHeroForSidebar = hero => {\n  const mainContent = document.querySelector('.umw-block-content > .entry-content');\n  const heroIntroTextContainer = hero.querySelector('.wp-block-umw-hero-intro-text');\n  const heroIntroText = hero.querySelector('.umw-intro-text');\n  const heroButtonsContainer = hero.querySelector('.wp-block-umw-hero-ctas');\n  const heroButtons = hero.querySelectorAll('.umw-hero__links__wrapper > *');\n\n  // Move buttons back into the main content first, so moved intro text will go above them.\n  if (heroButtons.length) {\n    Array.from(heroButtons).reverse().forEach(el => {\n      mainContent.insertBefore(el, mainContent.firstChild);\n    });\n    heroButtonsContainer.parentElement.removeChild(heroButtonsContainer);\n  }\n\n  // Move the intro text back into the main content.\n  if (heroIntroText) {\n    mainContent.insertBefore(heroIntroText, mainContent.firstChild);\n    heroIntroTextContainer.parentElement.removeChild(heroIntroTextContainer);\n  }\n};\n\n/**\r\n * If there is Intro Text inside a Hero, the breadcrumb should be above\r\n * that Intro Text.\r\n *\r\n * @param {HTMLElement} breadcrumb The breadcrumb container.\r\n */\nconst manipulateBreadcrumb = breadcrumb => {\n  // Find an Intro Text block in a Hero.\n  const validIntroText = document.querySelector('.layout > .umw-hero .umw-intro-text__inner');\n  if (validIntroText) {\n    // Move the breadcrumb into the hero above the Intro Text block.\n    validIntroText.insertBefore(breadcrumb, validIntroText.firstChild);\n  }\n};\n\n/**\r\n * Do all hero and breadcrumb manipulation in the right order and only when necessary.\r\n */\nconst manipulateHeroAndBreadcrumb = () => {\n  const sidebar = document.querySelector('.umw-sidebar');\n  const startingHero = document.querySelector('.layout > .umw-hero');\n  const breadcrumb = document.querySelector('.breadcrumb');\n  if (sidebar && startingHero) {\n    manipulateHeroForSidebar(startingHero);\n  }\n  if (!sidebar && startingHero && breadcrumb) {\n    manipulateBreadcrumb(breadcrumb);\n  }\n\n  // Bail out if no breadcrumb.\n  if (!breadcrumb) {\n    return;\n  }\n\n  // Move the mobile breadcrumb back arrow into the link element, which is not\n  // as easy to do in PHP.\n  const previous = breadcrumb.querySelector('.breadcrumb__previous');\n  const svg = previous.querySelector('svg');\n  const previousLink = previous.querySelector('a');\n  if (svg && previousLink) {\n    previousLink.insertBefore(svg, previousLink.firstChild);\n  }\n};\n\n// Tasks to do on the window's `load` event; see below.\nconst onFullLoad = () => {\n  window.imageGalleries = [];\n  document.querySelectorAll('.image-gallery').forEach(el => {\n    window.imageGalleries.push(new ImageGallery(el));\n  });\n  document.querySelectorAll('.umw-sidebar').forEach(el => {\n    new Sidebar(el);\n  });\n};\n\n// The `false` in the second parameter here makes the callback run on the\n// window's `load` event, later than the usual DOMContentLoaded. This is\n// needed to get image gallery initialization right, since it depends on\n// image dimensions.\nonLoad(() => {\n  horizontal_scroll.init();\n  Expandable.init();\n  GravityForm.init();\n  if (document.querySelector('#genesis-content')) {\n    onFullLoad();\n  } else {\n    register_module('image-gallery', ImageGallery);\n    register_module('carousel', Carousel);\n    register_module('sidebar', Sidebar);\n    register_module('header', Header);\n  }\n}, false);\n\n// Immediately upon DOMContentLoaded.\nonLoad(() => {\n  manipulateHeroAndBreadcrumb();\n  featured_news();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///839\n")},827:()=>{eval("/*  jQuery Nice Select - v1.1.0\r\n    https://github.com/hernansartorio/jquery-nice-select\r\n    Made by Hernán Sartorio  */\n\n(function ($) {\n  $.fn.niceSelect = function (method) {\n    // Methods\n    if (typeof method == 'string') {\n      if (method == 'update') {\n        this.each(function () {\n          var $select = $(this);\n          var $dropdown = $(this).next('.nice-select');\n          var open = $dropdown.hasClass('open');\n          if ($dropdown.length) {\n            $dropdown.remove();\n            create_nice_select($select);\n            if (open) {\n              $select.next().trigger('click');\n            }\n          }\n        });\n      } else if (method == 'destroy') {\n        this.each(function () {\n          var $select = $(this);\n          var $dropdown = $(this).next('.nice-select');\n          if ($dropdown.length) {\n            $dropdown.remove();\n            $select.css('display', '');\n          }\n        });\n        if ($('.nice-select').length == 0) {\n          $(document).off('.nice_select');\n        }\n      } else {\n        console.log('Method \"' + method + '\" does not exist.');\n      }\n      return this;\n    }\n\n    // Hide native select\n    this.hide();\n\n    // Create custom markup\n    this.each(function () {\n      var $select = $(this);\n      if (!$select.next().hasClass('nice-select')) {\n        create_nice_select($select);\n      }\n    });\n    function copyLabel($select) {\n      const id = $select.attr(\"id\");\n      const correspondingLabel = $('label[for=\"' + id + '\"]');\n      const clone = correspondingLabel.clone();\n      correspondingLabel.remove();\n      return clone;\n    }\n    function create_nice_select($select) {\n      /*var label = copyLabel($select);*/\n      $select.after($('<div></div>').addClass('nice-select').addClass($select.attr('class') || '').addClass($select.attr('disabled') ? 'disabled' : '').attr('tabindex', $select.attr('disabled') ? null : '0').html('<span class=\"current\"></span><ul class=\"list\"></ul>' /* + label[0].outerHTML*/));\n      var $dropdown = $select.next();\n      var $options = $select.find('option');\n      var $selected = $select.find('option:selected');\n      $dropdown.find('.current').html($selected.data('display') || $selected.text());\n      $options.each(function (i) {\n        var $option = $(this);\n        var display = $option.data('display');\n        if ($option.val() != null && $option.val() != '') {\n          $dropdown.find('ul').append($('<li></li>').attr('data-value', $option.val()).attr('data-display', display || null).addClass('option' + ($option.is(':selected') ? ' selected' : '') + ($option.is(':disabled') ? ' disabled' : '')).html($option.text()));\n        }\n      });\n    }\n\n    /* Event listeners */\n\n    // Unbind existing events in case that the plugin has been initialized before\n    $(document).off('.nice_select');\n\n    // Open/close\n    $(document).on('click.nice_select', '.nice-select', function (event) {\n      var $dropdown = $(this);\n      $('.nice-select').not($dropdown).removeClass('open');\n      $dropdown.toggleClass('open');\n      if ($dropdown.hasClass('open')) {\n        $dropdown.find('.option');\n        $dropdown.find('.focus').removeClass('focus');\n        $dropdown.find('.selected').addClass('focus');\n      } else {\n        $dropdown.focus();\n      }\n    });\n\n    // Close when clicking outside\n    $(document).on('click.nice_select', function (event) {\n      if ($(event.target).closest('.nice-select').length === 0) {\n        $('.nice-select').removeClass('open').find('.option');\n      }\n    });\n\n    // Option click\n    $(document).on('click.nice_select', '.nice-select .option:not(.disabled)', function (event) {\n      var $option = $(this);\n      var $dropdown = $option.closest('.nice-select');\n      $dropdown.addClass('has-input');\n      $dropdown.find('.selected').removeClass('selected');\n      $option.addClass('selected');\n      var text = $option.data('display') || $option.text();\n      $dropdown.find('.current').text(text);\n      $dropdown.prev('select').val($option.data('value')).trigger('change');\n    });\n\n    // Keyboard events\n    $(document).on('keydown.nice_select', '.nice-select', function (event) {\n      var $dropdown = $(this);\n      var $focused_option = $($dropdown.find('.focus') || $dropdown.find('.list .option.selected'));\n\n      // Space or Enter\n      if (event.keyCode == 32 || event.keyCode == 13) {\n        if ($dropdown.hasClass('open')) {\n          $focused_option.trigger('click');\n        } else {\n          $dropdown.trigger('click');\n        }\n        return false;\n        // Down\n      } else if (event.keyCode == 40) {\n        if (!$dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        } else {\n          var $next = $focused_option.nextAll('.option:not(.disabled)').first();\n          if ($next.length > 0) {\n            $dropdown.find('.focus').removeClass('focus');\n            $next.addClass('focus');\n          }\n        }\n        return false;\n        // Up\n      } else if (event.keyCode == 38) {\n        if (!$dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        } else {\n          var $prev = $focused_option.prevAll('.option:not(.disabled)').first();\n          if ($prev.length > 0) {\n            $dropdown.find('.focus').removeClass('focus');\n            $prev.addClass('focus');\n          }\n        }\n        return false;\n        // Esc\n      } else if (event.keyCode == 27) {\n        if ($dropdown.hasClass('open')) {\n          $dropdown.trigger('click');\n        }\n        // Tab\n      } else if (event.keyCode == 9) {\n        if ($dropdown.hasClass('open')) {\n          return false;\n        }\n      }\n    });\n\n    // Detect CSS pointer-events support, for IE <= 10. From Modernizr.\n    var style = document.createElement('a').style;\n    style.cssText = 'pointer-events:auto';\n    if (style.pointerEvents !== 'auto') {\n      $('html').addClass('no-csspointerevents');\n    }\n\n    /*var label = $dropdown.querySelector('label');\r\n    var container = $dropdown.closest('.gfield');\r\n    container.prepend(label);*/\n\n    return this;\n  };\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///827\n")}},__webpack_module_cache__={};function __webpack_require__(c){var l=__webpack_module_cache__[c];if(void 0!==l)return l.exports;var n=__webpack_module_cache__[c]={exports:{}};return __webpack_modules__[c](n,n.exports,__webpack_require__),n.exports}var __webpack_exports__=__webpack_require__(839)})();